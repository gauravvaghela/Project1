import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControl, FormBuilder, Validators, AbstractControl, FormArray } from '@angular/forms';
import { CustomeValidator } from '../../Services/CustomeValidator';
import { EmployeeService } from '../../Services/employee.service';
import { ActivatedRoute, Router } from '@angular/router';
import { IEmployee } from '../../Model/IEmployee';
import { ISkill } from '../../Model/ISkill';

@Component({
  selector: 'app-create-employee',
  templateUrl: './create-employee.component.html',
  styleUrls: ['./create-employee.component.less']
})
export class CreateEmployeeComponent implements OnInit {

  pageTitle: string = "Create Employee";
  employeeForm: FormGroup;
  experienceInYearsDDL: any = [
    { key: 3, value: 3 },
    { key: 5, value: 5 },
    { key: 7, value: 7 }
  ]
  employee: IEmployee;
  skilss: ISkill[];
  formErrors = {
    "fullName": "",
    "email": "",
    "phone": "",
    "skillName": "",
    "experienceInYears": "",
    "proficiency": ""
  }
  ValidationMessages = {
    "fullName": {
      "required": "Full Name is required",
      "minlength": "Full Name must be greater than 2 characters.",
      "maxlength": "Full Name must be less than 8 characters."
    },
    "email": {
      "required": "Email is required.",
      "emailDomain": "Email domain should be like 'gaurav@outlook.com'."
    },
    "confirmEmail": {
      "required": "confirm Email is required."
    },
    "emailGroup": {
      "emailMatch": "Email and Confirm Email should be matched."
    },
    "phone": {
      "required": "Phone is required."
    },
    // "skillName": {
    //   "required": "Skill Name is required."
    // },
    // "experienceInYears": {
    //   "required": "Experiance is required."
    // },
    // 'proficiency': {
    //   'required': 'Proficiency is required.',
    // }
  }

  constructor(private fb: FormBuilder, private _employeeService: EmployeeService, private _router: Router,
    private router: ActivatedRoute) { }

  ngOnInit() {
    //Create form without using form builder
    // this.employeeForm = new FormGroup({
    //   fullName: new FormControl(),
    //   email: new FormControl(),
    //   skills: new FormGroup({
    //     skillName: new FormControl(),
    //     experienceInYears: new FormControl(),
    //     proficiency: new FormControl()
    //   })
    // });

    //Create form using form builder
    this.employeeForm = this.fb.group({
      fullName: ["", [Validators.required, Validators.minLength(2), Validators.maxLength(8)]],
      contactPreference: ["email"],
      // emailDomain validation without using parameter
      // email: ["", [Validators.required, this.emailDomain]],
      emailGroup: this.fb.group({
        email: ["", [Validators.required, CustomeValidator.emailDomain("outlook.com")]],
        confirmEmail: ["", [Validators.required]]
      }, {
        validators: CustomeValidator.emailMatch
      }),
      phone: [""],
      skills: this.fb.array([
        this.addSkillFormGroup()
      ])
    });

    //Full name value change subscriber 
    // this.employeeForm.get("fullName").valueChanges.subscribe(
    //   values => {
    //     console.log(values);
    //   }
    // )

    //Full form value change subscriber
    this.employeeForm.valueChanges.subscribe((value) => {
      this.logValidationErrors(this.employeeForm);
    });

    this.employeeForm.get("contactPreference").valueChanges.subscribe((value: string) => {
      this.onContactPreferenceChange(value);
    });

    //this.logKeyValuePair(this.employeeForm);

    this.router.paramMap.subscribe(params => {
      const employeeId = params.get('id');
      if (employeeId) {
        this.getEmployee(Number(employeeId));
      }
      else {
        this.employee = {
          id: null,
          fullName: "",
          contactPreference: "",
          email: "",
          phone: null,
          skills: []
        }
      }
    })

  }

  getEmployee(employeeId: number) {
    this._employeeService.getEmployee(employeeId).subscribe((employee: IEmployee) => {
      this.employee = employee;
      this.EditEmployee(employee),
        (err: any) => console.log(err);
    });   
  }

  EditEmployee(employee: IEmployee) {
    this.pageTitle = "Edit Employee";
    this.employeeForm.patchValue({
      fullName: employee.fullName,
      contactPreference: employee.contactPreference,
      emailGroup: {
        email: employee.email,
        confirmEmail: employee.email
      },
      phone: employee.phone
    });
    this.employeeForm.setControl("skills", this.setSkillFormValue(employee.skills))
  }

  setSkillFormValue(skillSet: ISkill[]): FormArray {
    const formArray = new FormArray([]);
    skillSet.forEach(x => {
      formArray.push(this.fb.group({
        skillName: [x.skillName, [Validators.required]],
        experienceInYears: [[x.experienceInYears], [Validators.required]],
        proficiency: [x.proficiency, [Validators.required]]
      }));
    });
    return formArray;
  }

  addSkillFormGroup(): FormGroup {
    return this.fb.group({
      skillName: ["", [Validators.required]],
      experienceInYears: [[], [Validators.required]],
      proficiency: ["intermediate", [Validators.required]]
    });
  }

  AddSkillDynamic(): void {
    (<FormArray>this.employeeForm.get("skills")).push(this.addSkillFormGroup());
  }

  removeSkillDynamic(index: number): void {
    const skillFormArray = <FormArray>this.employeeForm.get("skills");
    skillFormArray.removeAt(index);
    skillFormArray.markAsDirty();
    skillFormArray.markAsTouched();
  }

  onContactPreferenceChange(selectedValue: string) {
    const phoneControl = this.employeeForm.get("phone");
    if (selectedValue.toLowerCase() == "phone") {
      phoneControl.setValidators(Validators.required);
    }
    else {
      phoneControl.clearValidators();
    }
    phoneControl.updateValueAndValidity();
  }

  logKeyValuePair(group: FormGroup) {
    Object.keys(group.controls).forEach((key: string) => {
      const abstractControl = group.get(key);
      if (abstractControl instanceof FormGroup) {
        this.logKeyValuePair(abstractControl);
      } else {
        console.log("Key= " + key + " && Value= " + abstractControl.value)
      }
    });
  }

  logValidationErrors(group: FormGroup = this.employeeForm) {
    Object.keys(group.controls).forEach((key: string) => {
      const abstractControl = group.get(key);
      this.formErrors[key] = "";
      if (abstractControl && !abstractControl.valid && (abstractControl.dirty || abstractControl.touched || abstractControl.value !== "")) {
        const Message = this.ValidationMessages[key];
        for (const errorKey in abstractControl.errors) {
          if (errorKey) {
            this.formErrors[key] += Message[errorKey] + " ";
          }
        }
      }
      if (abstractControl instanceof FormGroup) {
        this.logValidationErrors(abstractControl);
      }

      //Comment because of skill group error message will pass in html template.
      // if (abstractControl instanceof FormArray) {
      //   for (const control of abstractControl.controls) {
      //     if (control instanceof FormGroup) {
      //       this.logValidationErrors(control);
      //     }
      //   }
      // }

    });
  }

  LoadFormData() {
    //Use of Set Value is fill up all form control value at time. if something will miss you will get error.
    this.employeeForm.setValue({
      fullName: "Gaurav",
      email: "gaurav@gmail.com",
      phone: "1234567890",
      skills: {
        skillName: "Angular 8",
        experienceInYears: "3",
        proficiency: "intermediate"
      }
    });

    this.logKeyValuePair(this.employeeForm);

    //Use of Patch Value is fill up all sub-set of form control value at time.
    // this.employeeForm.patchValue({
    //   fullName: "Gaurav",
    //   email: "gaurav@gmail.com",
    //   skills: {
    //     skillName: "Angular 8",
    //     experienceInYears: "3",
    //     proficiency: "intermediate"
    //   }
    // });
  }

  onSubmit(): void {
    this.mapFormValuestoEmployeeModel();
    if (this.employeeForm.valid) {
      if (this.employee.id) {
        this._employeeService.updateEmployee(this.employee).subscribe(
          () => this._router.navigate(['employees/ListEmployee']),
          (err: any) => console.log(err)
        );
      } else {
        this._employeeService.addEmployee(this.employee).subscribe(
          () => this._router.navigate(['employees/ListEmployee']),
          (err: any) => console.log(err)
        );
      }
    }
  }

  mapFormValuestoEmployeeModel() {
    this.employee.fullName = this.employeeForm.value.fullName;
    this.employee.contactPreference = this.employeeForm.value.contactPreference;
    this.employee.email = this.employeeForm.value.emailGroup.email;
    this.employee.phone = this.employeeForm.value.phone;
    this.employee.skills = this.employeeForm.value.skills;
  }

}



<form class="form-horizontal col-md-7" autocomplete="off" [formGroup]="employeeForm" (ngSubmit)="onSubmit()"
    style="margin: 10px;">
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h3 class="panel-title">{{pageTitle}}</h3>
        </div>
        <div class="panel-body">
            <div class="form-group" [ngClass]="{'has-error':formErrors.fullName}">
                <label class="col-sm-2 control-label" for="fullName">Full Name</label>
                <div class="col-sm-8">
                    <input id="fullName" type="text" class="form-control" formControlName="fullName"
                        (blur)="logValidationErrors()">
                    <span class="help-block" *ngIf="formErrors.fullName">
                        {{formErrors.fullName}}
                    </span>
                </div>
            </div>

            <div class="form-group">
                <label class="col-md-2 control-label">Contact Preference</label>
                <div class="col-md-8">
                    <label class="radio-inline">
                        <input type="radio" value="email" formControlName="contactPreference">email
                    </label>
                    <label class="radio-inline">
                        <input type="radio" value="phone" formControlName="contactPreference">phone
                    </label>
                </div>
            </div>

            <div formGroupName="emailGroup">

                <div class="form-group" [ngClass]="{'has-error':formErrors.email}">
                    <label class="col-sm-2 control-label" for="email">Email</label>
                    <div class="col-sm-8">
                        <input id="email" type="text" class="form-control" formControlName="email"
                            (blur)="logValidationErrors()">
                        <span class="help-block" *ngIf="formErrors.email">
                            {{formErrors.email}}
                        </span>
                    </div>
                </div>

                <div class="form-group" [ngClass]="{'has-error':formErrors.confirmEmail || formErrors.emailGroup}">
                    <label class="col-sm-2 control-label" for="confirmEmail">Confirm Email</label>
                    <div class="col-sm-8">
                        <input id="confirmEmail" type="text" class="form-control" formControlName="confirmEmail"
                            (blur)="logValidationErrors()">
                        <span class="help-block" *ngIf="formErrors.confirmEmail || formErrors.emailGroup">
                            {{formErrors.confirmEmail ? formErrors.confirmEmail : formErrors.emailGroup}}
                        </span>
                    </div>
                </div>

            </div>
            <div class="form-group" [ngClass]="{'has-error':formErrors.phone}">
                <label class="col-sm-2 control-label" for="fullName">phone</label>
                <div class="col-sm-8">
                    <input id="phone" type="text" class="form-control" formControlName="phone"
                        (blur)="logValidationErrors()">
                    <span class="help-block" *ngIf="formErrors.phone">
                        {{formErrors.phone}}
                    </span>
                </div>
            </div>

        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-2">
                <button class="btn btn-primary" (click)="AddSkillDynamic()"
                    [disabled]="employeeForm.get('skills').invalid">Add skill</button>
            </div>
        </div>
        <div formArrayName="skills" *ngFor="let skill of employeeForm.get('skills').controls;let i = index">
            <hr *ngIf="i > 0">
            <div [formGroupName]="i">
                <div class="form-group"
                    [ngClass]="{'has-error': skill.get('skillName').touched && skill.get('skillName').invalid }">
                    <label class="col-sm-2 control-label" attr.for="{{'skillName'+i}}">
                        Skill
                    </label>
                    <div class="col-sm-4">
                        <input type="text" class="form-control" id="{{'skillName'+i}}" formControlName="skillName"
                            (blur)="logValidationErrors()" placeholder="C#, ASP.NET, Type Script etc...">
                        <span class="help-block"
                            *ngIf="skill.get('skillName').touched && skill.get('skillName').errors?.required">
                            Skill Name is required.
                        </span>
                    </div>
                    <div class="col-sm-6" *ngIf="employeeForm.get('skills').length > 1">
                        <button title="Remove Skill" class="btn btn-danger pull-right" (click)="removeSkillDynamic(i)">
                            <span class="glyphicon glyphicon-remove"></span>
                        </button>
                    </div>
                </div>

                <!-- <div class="form-group"
                    [ngClass]="{'has-error': skill.get('experienceInYears').touched && skill.get('experienceInYears').invalid}">
                    <label class="col-sm-2 control-label" attr.for="{{'experienceInYears'+i}}">
                        Experience
                    </label>
                    <div class="col-sm-4">
                        <input type="text" class="form-control" id="{{'experienceInYears'+i}}"
                            formControlName="experienceInYears" (blur)="logValidationErrors()" placeholder="In Years"
                            (blur)="logValidationErrors()">
                        <span class="help-block"
                            *ngIf="skill.get('experienceInYears').touched && skill.get('experienceInYears').errors?.required">
                            Experiance is required.
                        </span>
                    </div>
                </div> -->

                <div class="form-group"
                    [ngClass]="{'has-error': skill.get('experienceInYears').dirty && skill.get('experienceInYears').value == ''}">
                    <label class="col-sm-2 control-label" attr.for="{{'experienceInYears'+i}}">
                        Experience
                    </label>
                    <div class="col-sm-4">
                        <select class="form-control" id="{{'experienceInYears'+i}}" formControlName="experienceInYears"
                            (change)="logValidationErrors()">
                            <option value="">Select Experiance</option>
                            <option *ngFor="let list of experienceInYearsDDL" value="{{list.key}}">{{list.value}}
                            </option>
                        </select>
                        <span class="help-block" *ngIf="skill.get('experienceInYears').dirty
                            && skill.get('experienceInYears').value == '' ">
                            Experiance is required.
                        </span>
                    </div>
                </div>

                <div class="form-group" [ngClass]="{'has-error':formErrors.proficiency}">
                    <label class="col-md-2 control-label">Proficiency</label>
                    <div class="col-md-8">
                        <label class="radio-inline">
                            <input id="{{'Beginner'+i}}" type="radio" value="beginner" formControlName="proficiency"
                                (blur)="logValidationErrors()">Beginner
                        </label>
                        <label class="radio-inline">
                            <input id="{{'Intermediate'+i}}" type="radio" value="intermediate"
                                formControlName="proficiency" (blur)="logValidationErrors()">Intermediate
                        </label>
                        <label class="radio-inline">
                            <input id="{{'Advanced'+i}}" type="radio" value="advanced" formControlName="proficiency"
                                (blur)="logValidationErrors()">Advanced
                        </label>
                        <span class="help-block" *ngIf="formErrors.proficiency">
                            {{formErrors.proficiency}}
                        </span>
                    </div>
                </div>
            </div>

        </div>
        <div class="panel-footer panel-primary">
            <button class="btn btn-primary" type="submit" [disabled]="employeeForm.invalid">Save</button> &nbsp;&nbsp;
        </div>
    </div>
</form><br />

<div style="margin: 10px;">
    <table class="table" border="1">
        <tr>
            <th style="padding: 10px">Employee form</th>
            <th style="padding: 10px">Employee form (fullName)</th>
        </tr>
        <tr>
            <td style="padding: 10px">
                touched : {{employeeForm.touched}} <br />
                dirty : {{employeeForm.dirty}} <br />
                valid : {{employeeForm.valid}} <br />
                form Values : {{employeeForm.value | json}} <br />
            </td>
            <td style="padding: 10px">
                touched : {{employeeForm.get("fullName").touched}} <br />
                dirty : {{employeeForm.get("fullName").dirty}} <br />
                valid : {{employeeForm.get("fullName").valid}} <br />
                fullName Values : {{employeeForm.get("fullName").value | json}} <br />
            </td>
        </tr>
    </table>
</div>





import { AbstractControl } from '@angular/forms';

export class CustomeValidator {
  //emailDomain validation using parameter
  static emailDomain(domainName: string) {
    return (control: AbstractControl): { [key: string]: any } => {
      const email = control.value;
      const domain = email.substring(email.lastIndexOf("@") + 1);
      if (domain.toLocaleLowerCase() == domainName.toLocaleLowerCase()) {
        return null;
      } else {
        return { 'emailDomain': true }
      }
    }
  }

  // emailDomain validation without using parameter
  // emailDomain(control: AbstractControl): { [key: string]: any } | null {
  //   const email: string = control.value;
  //   const domain: string = email.substring(email.lastIndexOf("@") + 1);
  //   if (domain.toLocaleLowerCase() == "outlook.com") {
  //     return null;
  //   } else {
  //     return { 'emailDomain': true }
  //   }
  // }

  //Validator use for match password and confirm password
  static emailMatch(group: AbstractControl): { [key: string]: any } {
    const email = group.get("email");
    const confirmEmail = group.get("confirmEmail");
    if (email.value == confirmEmail.value || (confirmEmail.pristine && confirmEmail.value === '')) {
      return null;
    } else {
      return { "emailMatch": true };
    }
  }
}
